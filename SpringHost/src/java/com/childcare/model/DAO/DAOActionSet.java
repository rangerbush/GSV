/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.childcare.model.DAO;

import com.childcare.entity.ActionSet;
import com.childcare.entity.Anchor;
import com.childcare.entity.AnchorPK;
import com.childcare.model.JdbcDataDAOImpl;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Resource;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

/**
 *
 * @author New User
 */
public class DAOActionSet {
    @Resource 
    private JdbcTemplate jdbcTemplate;

    
     protected class ActionMapper implements RowMapper, Serializable{
         @Override
         public Object mapRow(ResultSet arg0, int arg1) throws SQLException
         {
             ActionSet action = new ActionSet();
             action.setAid(arg0.getInt("AID"));
             action.setDesc(arg0.getString("DESC"));
             return action;
         }   
    }
     
      public ActionSet getActionInstance(int AID) throws DataAccessException
    {
        String sql = "SELECT `ActionSet`.`AID`,\n" +
                        "    `ActionSet`.`DESC`\n" +
                        "FROM `GSV_DB`.`ActionSet`\n"+
                        "WHERE `ActionSet`.`AID` ="+AID+" AND `ActionSet`.`Discard` = 0;";
            return (ActionSet)this.jdbcTemplate.queryForObject(sql, new DAOActionSet.ActionMapper());
    }
      
    public Integer createAction(String desc) throws DataAccessException
    {
        String sql = "INSERT INTO `GSV_DB`.`ActionTaken`\n" +
                     "(`GID`)\n" +
                     "VALUES\n" +
                     "("+desc+");";
            KeyHolder keyHolder = new GeneratedKeyHolder();             
            int updatecount/*number of effected rows*/ = this.jdbcTemplate.update(new PreparedStatementCreator() {  
            @Override  
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {  
            PreparedStatement ps = (PreparedStatement) connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);  
            return ps;  }},keyHolder);
            int id = keyHolder.getKey().intValue(); 
            return id;
            //http://fancyboy2050.iteye.com/blog/1455559
            //在JDBC 3.0规范中，当新增记录时，允许将数据库自动产生的主键值绑定到Statement或PreparedStatement中
            //当autoGeneratedKeys参数设置为Statement.RETURN_GENERATED_KEYS值时即可绑定数据库产生的主键值，设置为Statement.NO_GENERATED_KEYS时，不绑定主键值。
    }
    
    /**
     * 0 row will be effected if target row is set as discarded
     * @param action
     * @throws DataAccessException 
     */
    public void updateAction(ActionSet action) throws DataAccessException
    {
        String sql = "UPDATE `GSV_DB`.`ActionSet`\n" +
                     "SET\n" +
                     "`DESC` = "+action.getDesc()+"\n" +
                     "WHERE `AID` = "+action.getAid()+"AND `ActionSet`.`Discard` = 0;";
        this.jdbcTemplate.execute(sql);   
    }
    
    public void deleteAction(int AID) throws DataAccessException
    {
        String sql = "UPDATE `GSV_DB`.`ActionSet`\n" +
                     "SET\n" +
                     "`Discard` = 1\n"+
                     "WHERE `AID` = "+AID+";";
         this.jdbcTemplate.execute(sql);  
    }
    
        public void recoverAction(int AID) throws DataAccessException
    {
        String sql = "UPDATE `GSV_DB`.`ActionSet`\n" +
                     "SET\n" +
                     "`Discard` = 0\n"+
                     "WHERE `AID` = "+AID+";";
         this.jdbcTemplate.execute(sql);  
    }
      
    
}
