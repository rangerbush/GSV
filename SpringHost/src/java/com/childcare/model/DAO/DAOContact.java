/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.childcare.model.DAO;

import com.childcare.entity.Account;
import com.childcare.entity.Child;
import com.childcare.entity.Contact;
import com.childcare.entity.Family;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

/**
 *
 * @author New User
 */
public class DAOContact {
      @Resource 
    private JdbcTemplate jdbcTemplate;
      
         protected class Mapper implements RowMapper,Serializable{  
            /**
             * 
             * @param arg0 the ResultSet to map (pre-initialized for the current row)
             * @param arg1 the number of the current row
             * @return
             * @throws SQLException 
             */
        @Override  
        public Object mapRow(ResultSet arg0, int arg1) throws SQLException {  
            // TODO Auto-generated method stub  
            Contact contact = new Contact();
            contact.setContactId(arg0.getInt("contact_id"));
            contact.setEmail(arg0.getString("email"));
            contact.setUid(new Account(arg0.getLong("uid")));
            contact.setFirstName(arg0.getString("firstName"));
            contact.setLastName(arg0.getString("lastName"));
            contact.setPhone(arg0.getString("phone"));
            contact.setStatus(arg0.getInt("status"));
            return contact;  
        }  
    }
         
    private Contact normalizer(Contact c)
    {
        if (c.getFirstName()==null)
            c.setFirstName("");
        if (c.getLastName()==null)
            c.setLastName("");
        if (c.getEmail()==null)
            c.setEmail("");
        if (c.getPhone()==null)
            c.setPhone("");
        return c;
    }
         
    public int create(Contact contact)
    {
        contact = this.normalizer(contact);
        String sql = "INSERT INTO `GSV_DB`.`contact`\n " +
                    "(`uid`,`firstName`,`lastName`,`email`,`phone`,`status`)\n " +
                    " VALUES\n " +
                    "( "+contact.getUid().getUid()+", '"
                +contact.getFirstName().replaceAll("\'", "\\\\'")+"', '"
                +contact.getLastName().replaceAll("\'", "\\\\'")+"', '"
                +contact.getEmail().replaceAll("\'", "\\\\'")+"', '"
                +contact.getPhone()+"',"+contact.getStatus()+");";
        KeyHolder keyHolder = new GeneratedKeyHolder();             
        int updatecount/*number of effected rows*/ = this.jdbcTemplate.update(new PreparedStatementCreator() {  
            @Override  
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {  
            PreparedStatement ps = (PreparedStatement) connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);  
            return ps;  }},keyHolder);
            int id = keyHolder.getKey().intValue(); 
            return id;
            //http://fancyboy2050.iteye.com/blog/1455559
            //在JDBC 3.0规范中，当新增记录时，允许将数据库自动产生的主键值绑定到Statement或PreparedStatement中
            //当autoGeneratedKeys参数设置为Statement.RETURN_GENERATED_KEYS值时即可绑定数据库产生的主键值，设置为Statement.NO_GENERATED_KEYS时，不绑定主键值。
    } 
    
    public List<Contact> retrieveByUID(long uid)
    {
        String sql = "SELECT * FROM `GSV_DB`.`contact` WHERE `uid` = "+uid+";";
        List<Contact> list = this.jdbcTemplate.query(sql,new Mapper());
        return list;
    }
    
    public Contact getInstance(int id)
    {
        String sql = "SELECT * FROM `GSV_DB`.`contact` WHERE `contact_id` = "+id+";";
        Contact c = (Contact)this.jdbcTemplate.queryForObject(sql, new Mapper());
        return c;
    }
    
    public void update (Contact contact)
    {
        contact = this.normalizer(contact);
        String sql = "UPDATE `GSV_DB`.`contact` " +
                    "SET " +
                   // "`fid` =  "+contact.getFid().getFid()+ ", " +
                    "`firstName` =  '"+contact.getFirstName().replaceAll("\'", "\\\\'")+  "', " +
                    "`lastName` =  '"+contact.getLastName().replaceAll("\'", "\\\\'")+  "', " +
                    "`email` =  '"+contact.getEmail().replaceAll("\'", "\\\\'")+  "', " +
                    "`phone` =  '"+contact.getPhone().replaceAll("\'", "\\\\'")+  "', " +
                    "`status` ="+contact.getStatus()+
                    " WHERE `contact_id` =  "+contact.getContactId()+ ";";
        this.jdbcTemplate.execute(sql);
    }
    
    public void delete(int contactID)
    {
        String sql = "DELETE FROM `GSV_DB`.`contact` " +
                     "WHERE `contact_id` = "+contactID+";";
        this.jdbcTemplate.execute(sql);
    }
         
}
